use classicmodels;
show tables;
-- 1) Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.
select c.customerName , count(*) as ordercount from customers c
inner join orders o on
c.customerNumber=o.customerNumber 
group by 
c.customerName
order by ordercount desc 
-- 2) Retrieve the list of customers who have placed orders but haven't made any payments yet.

select distinct c.customerNumber,c.customerName from customers c 
inner join orders o on
c.customerNumber=o.customerNumber
left join  payments p on
p.customerNumber=o.customerNumber
where p.customerNumber is Null;
-- 3) Retrieve a product that has been ordered the least number of times. Display the product code, product name, and the number of times it has been ordered
select p.productCode, p.productName, count(o.orderNumber) as order_count
from products p 
inner join orderdetails o using (productcode)
group by p.productcode , p.productname
order by order_count
limit 1;
-- 4)Classic Models has a product line called "Vintage Cars." 
-- The management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December). Write a MySQL stored procedure that takes no input parameters and returns 
-- total revenue of the "Vintage Cars" product line for the last quarter of 2003.
select orderDate from orders;
delimiter $$ 
create procedure total_revenue_VintageCars()
begin
(select  year(o.orderDate) as years ,quarter(o.orderDate) as quarters,
sum(od.quantityOrdered *od.priceEach) as Revenue_VintageCars
from orders o 
inner join orderdetails od 
on
o.orderNumber=od.orderNumber
inner join products p on
p.productCode=od.productCode
where p.productLine='Vintage Cars' and year(o.orderDate)=2003 and quarter(o.orderDate )=4
group by 1,2);
end $$

DELIMITER ;
call total_revenue_VintageCars();


-- 5) Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers along with their total order values across all orders.

with top_5_customers as
(select c.customerNumber ,c.customerName,sum(od.quantityOrdered * od.priceEach) as total_order_value ,
rank() over(order by sum(od.quantityOrdered * od.priceEach) desc ) as order_value_ranks
from customers c 
inner join orders o on
c.customerNumber=o.customerNumber
inner join orderdetails od on
o.orderNumber=od.orderNumber
group by o.customerNumber)
select * from top_5_customers
limit 5;